name: 'Deploy to EC2'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

jobs:
  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    environment: pipeline
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './profile_app/package-lock.json'

    - name: Install Dependencies
      working-directory: ./profile_app
      run: |
        echo "Installing dependencies..."
        npm install --legacy-peer-deps
        echo "Dependencies installed successfully"

    - name: Build Application
      working-directory: ./profile_app
      run: |
        echo "Building application..."
        npm run build
        echo "Build completed successfully"

    - name: Verify Environment Variables
      run: |
        if [ -z "${{ secrets.EC2_HOST }}" ]; then
          echo "Error: EC2_HOST is not set"
          exit 1
        fi
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "Error: SSH_PRIVATE_KEY is not set"
          exit 1
        fi

    - name: Setup SSH
      run: |
        echo "Setting up SSH configuration..."
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        echo "Adding SSH key fingerprint..."
        ssh-keyscan -H -T 60 ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || echo "Warning: ssh-keyscan failed"
        
        # Create SSH config file for more reliable connections
        cat > ~/.ssh/config << EOF
        Host *
          StrictHostKeyChecking no
          UserKnownHostsFile ~/.ssh/known_hosts
          ServerAliveInterval 60
          ServerAliveCountMax 30
          ConnectTimeout 30
        EOF
        chmod 600 ~/.ssh/config

    - name: Test SSH Connection
      run: |
        echo "Testing SSH connection to ${{ secrets.EC2_HOST }}..."
        if ! ssh -i ~/.ssh/deploy_key -v ec2-user@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"'; then
          echo "Error: Failed to establish SSH connection"
          echo "Debugging information:"
          ls -la ~/.ssh/
          ssh -i ~/.ssh/deploy_key -v ec2-user@${{ secrets.EC2_HOST }} 2>&1 || true
          exit 1
        fi
        
    - name: Deploy and Start Application
      working-directory: ./profile_app
      run: |
        # Debug: Print hostname and validate
        echo "Deploying to host: ${{ secrets.EC2_HOST }}"
        
        # Create a temp tar file
        tar --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.next/cache' \
            --exclude='.env' \
            -czf /tmp/app.tar.gz .

        # Copy using scp
        scp -i ~/.ssh/deploy_key /tmp/app.tar.gz "ec2-user@${{ secrets.EC2_HOST }}:~/app.tar.gz"

        # Extract and setup on remote
        ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.EC2_HOST }} "
          cd ~ && \
          rm -rf app && \
          mkdir app && \
          tar -xzf app.tar.gz -C app && \
          cd app && \
          npm install && \
          pm2 delete nextjs || true && \
          pm2 start npm --name \"nextjs\" -- start && \
          pm2 save"

        # Cleanup local tar
        rm /tmp/app.tar.gz

    - name: Simple Verification
      run: |
        sleep 5
        ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.EC2_HOST }} "pm2 list"
