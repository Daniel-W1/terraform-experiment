name: 'Terraform and Deploy'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    outputs:
      rds_endpoint: ${{ steps.rds-output.outputs.endpoint }}
      s3_bucket: ${{ steps.s3-output.outputs.bucket }}
      ec2_public_ip: ${{ steps.ec2-output.outputs.public_ip }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.0

    - name: Terraform Format
      run: terraform fmt -check -recursive
      continue-on-error: true

    # S3 Setup
    - name: Terraform Init - S3
      working-directory: ./S3
      run: terraform init

    - name: Terraform Apply - S3
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ./S3
      run: terraform apply -auto-approve

    - name: Get S3 Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: s3-output
      working-directory: ./S3
      run: |
        echo "bucket=$(terraform output -raw bucket_name)" >> $GITHUB_OUTPUT

    # RDS Setup
    - name: Terraform Init - RDS
      working-directory: ./RDS
      run: terraform init

    - name: Terraform Apply - RDS
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ./RDS
      run: terraform apply -auto-approve

    - name: Get RDS Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: rds-output
      working-directory: ./RDS
      run: |
        echo "endpoint=$(terraform output -raw endpoint)" >> $GITHUB_OUTPUT

    # EC2 Setup
    - name: Terraform Init - EC2
      working-directory: ./EC2
      run: terraform init

    - name: Terraform Apply - EC2
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ./EC2
      env:
        TF_VAR_rds_endpoint: ${{ steps.rds-output.outputs.endpoint }}
        TF_VAR_s3_bucket_name: ${{ steps.s3-output.outputs.bucket }}
      run: terraform apply -auto-approve

    - name: Get EC2 Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: ec2-output
      working-directory: ./EC2
      run: |
        echo "public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

  deploy:
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Dependencies
      working-directory: ./profile_app
      run: npm ci

    - name: Create env file
      working-directory: ./profile_app
      run: |
        cat << EOF > .env.local
        DATABASE_URL=postgresql://dbadmin:${{ secrets.DB_PASSWORD }}@${{ needs.terraform.outputs.rds_endpoint }}/userprofiles
        AWS_S3_BUCKET=${{ needs.terraform.outputs.s3_bucket }}
        EOF

    - name: Build Application
      working-directory: ./profile_app
      run: npm run build

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ needs.terraform.outputs.ec2_public_ip }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      working-directory: ./profile_app
      run: |
        rsync -avz -e "ssh -i ~/.ssh/deploy_key" \
          --exclude='.git' \
          --exclude='node_modules' \
          ./ ec2-user@${{ needs.terraform.outputs.ec2_public_ip }}:/var/www/nextjs/

    - name: Start Application
      run: |
        ssh -i ~/.ssh/deploy_key ec2-user@${{ needs.terraform.outputs.ec2_public_ip }} '
          cd /var/www/nextjs && \
          npm ci && \
          pm2 delete nextjs || true && \
          pm2 start npm --name "nextjs" -- start
        '
