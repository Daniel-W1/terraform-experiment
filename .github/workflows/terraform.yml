name: 'Deploy to EC2'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    environment: pipeline
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './profile_app/package-lock.json'

    - name: Install Dependencies
      working-directory: ./profile_app
      run: npm install --legacy-peer-deps

    - name: Generate Prisma Client
      working-directory: ./profile_app
      run: npx prisma generate --schema=./src/server/prisma/schema.prisma

    - name: Build Application
      working-directory: ./profile_app
      run: npm run build

    - name: Setup SSH with Persistence
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
        # Create SSH config with connection persistence settings
        cat > ~/.ssh/config << EOF
        Host *
          ServerAliveInterval 60
          ServerAliveCountMax 10
          TCPKeepAlive yes
          ControlMaster auto
          ControlPath ~/.ssh/control-%r@%h:%p
          ControlPersist 10m
        EOF
        chmod 600 ~/.ssh/config

    - name: Prepare Deployment Package
      working-directory: ./profile_app
      run: |
        # Create deployment package
        tar --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.next/cache' \
            --exclude='.env' \
            --exclude='src/server/generated' \
            --exclude='.next' \
            -czf /tmp/app.tar.gz .

    - name: Copy to EC2
      run: |
        # Copy with compression and verbose output
        scp -C -v -i ~/.ssh/deploy_key /tmp/app.tar.gz ec2-user@${{ secrets.EC2_HOST }}:~/app.tar.gz

    - name: Extract and Install Dependencies
      run: |
        ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.EC2_HOST }} "
          cd ~ && \
          rm -rf app && \
          mkdir app && \
          tar -xzf app.tar.gz -C app && \
          rm app.tar.gz && \
          cd app && \
          if [ ! -f package.json ]; then
            echo 'Error: package.json not found in app directory'
            exit 1
          fi && \
          export NODE_OPTIONS='--max-old-space-size=4096' && \
          npm install --legacy-peer-deps"

    - name: Generate Prisma and Prepare Build
      run: |
        ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.EC2_HOST }} "
          cd ~/app && \
          if [ ! -f package.json ]; then
            echo 'Error: package.json not found in app directory'
            exit 1
          fi && \
          export NODE_OPTIONS='--max-old-space-size=4096' && \
          export NEXT_TELEMETRY_DISABLED=1 && \
          npx prisma generate --schema=./src/server/prisma/schema.prisma && \
          echo 'Preparing for build...' && \
          rm -rf .next && \
          mkdir -p .next"

    - name: Run Next.js Build with Monitoring
      run: |
        ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.EC2_HOST }} "
          cd ~/app && \
          if [ ! -f package.json ]; then
            echo 'Error: package.json not found in app directory'
            exit 1
          fi && \
          pwd && \
          ls -la && \
          export NODE_OPTIONS='--max-old-space-size=4096' && \
          export NEXT_TELEMETRY_DISABLED=1 && \
          export NEXT_DEBUG=1 && \
          echo 'Starting build in' \$(pwd) && \
          (while true; do echo 'Build still running...'; free -h; ls -la; sleep 30; done) & \
          MONITOR_PID=$! && \
          npm run build && \
          kill $MONITOR_PID || true"

    - name: Start Application
      run: |
        ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.EC2_HOST }} "
          cd ~/app && \
          if [ ! -f package.json ]; then
            echo 'Error: package.json not found in app directory'
            exit 1
          fi && \
          export NODE_OPTIONS='--max-old-space-size=4096' && \
          pm2 delete nextjs || true && \
          pm2 start npm --name \"nextjs\" -- start && \
          pm2 save"

    - name: Cleanup and Verify
      run: |
        rm /tmp/app.tar.gz
        sleep 5
        ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.EC2_HOST }} "pm2 list"
