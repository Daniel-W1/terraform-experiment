name: 'Deploy to EC2'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

jobs:
  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    environment: pipeline
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './profile_app/package-lock.json'

    - name: Install Dependencies
      working-directory: ./profile_app
      run: |
        echo "Installing dependencies..."
        npm ci
        echo "Dependencies installed successfully"

    - name: Build Application
      working-directory: ./profile_app
      run: |
        echo "Building application..."
        npm run build
        echo "Build completed successfully"

    - name: Verify Environment Variables
      run: |
        if [ -z "${{ secrets.EC2_HOST }}" ]; then
          echo "Error: EC2_HOST is not set"
          exit 1
        fi
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "Error: SSH_PRIVATE_KEY is not set"
          exit 1
        fi

    - name: Setup SSH
      run: |
        echo "Setting up SSH configuration..."
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        echo "Adding SSH key fingerprint..."
        ssh-keyscan -H -T 60 ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || echo "Warning: ssh-keyscan failed"
        
        # Create SSH config file for more reliable connections
        cat > ~/.ssh/config << EOF
        Host *
          StrictHostKeyChecking no
          UserKnownHostsFile ~/.ssh/known_hosts
          ServerAliveInterval 60
          ServerAliveCountMax 30
          ConnectTimeout 30
        EOF
        chmod 600 ~/.ssh/config

    - name: Test SSH Connection
      run: |
        echo "Testing SSH connection to ${{ secrets.EC2_HOST }}..."
        if ! ssh -i ~/.ssh/deploy_key -v ec2-user@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"'; then
          echo "Error: Failed to establish SSH connection"
          echo "Debugging information:"
          ls -la ~/.ssh/
          ssh -i ~/.ssh/deploy_key -v ec2-user@${{ secrets.EC2_HOST }} 2>&1 || true
          exit 1
        fi
        
    - name: Prepare Target Directory
      run: |
        echo "Creating destination directory on EC2..."
        echo "TARGET_DIR value: '$TARGET_DIR'"

        ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.EC2_HOST }} '
          # Try to create the directory with sudo if available
          if command -v sudo >/dev/null 2>&1; then
            sudo mkdir -p /var/www/nextjs
            sudo chown -R ec2-user:ec2-user /var/www/nextjs
          else
            # Try to create in home directory if sudo not available
            mkdir -p ~/nextjs
          fi
        '

    - name: Deploy to EC2
      working-directory: ./profile_app
      run: |
        echo "Checking target directory..."
        TARGET_DIR=$(ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.EC2_HOST }} '
          if [ -d "/var/www/nextjs" ] && [ -w "/var/www/nextjs" ]; then
            echo "/var/www/nextjs"
          else
            echo "$HOME/nextjs"
          fi
        ')
        echo "Using target directory: $TARGET_DIR"
        
        echo "Deploying to EC2..."
        echo "TARGET_DIR value: '$TARGET_DIR'"
        rsync -avz -e "ssh -i ~/.ssh/deploy_key" \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.next/cache' \
          --exclude='.env' \
          ./ "ec2-user@${{ secrets.EC2_HOST }}:${TARGET_DIR:-/home/ec2-user/nextjs}/"
        echo "Deployment completed successfully"

    - name: Start Application
      run: |
        echo "Starting application on EC2..."
        TARGET_DIR=$(ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.EC2_HOST }} '
          if [ -d "/var/www/nextjs" ]; then
            echo "/var/www/nextjs"
          else
            echo "$HOME/nextjs"
          fi
        ')
        
        ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.EC2_HOST }} "
          cd $TARGET_DIR && \
          npm ci && \
          pm2 delete nextjs || true && \
          pm2 start npm --name \"nextjs\" -- start && \
          pm2 save"

    - name: Verify Deployment
      run: |
        echo "Verifying deployment..."
        # Wait for the application to start
        sleep 10
        # Check if pm2 process is running
        ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.EC2_HOST }} '
          if ! pm2 pid nextjs > /dev/null; then
            echo "Error: Application failed to start"
            exit 1
          fi
          echo "Application is running successfully"
        '
